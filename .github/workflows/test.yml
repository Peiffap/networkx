name: test

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  base:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ["3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install packages
        run: |
          uv pip install -e .[test]
          uv pip list

      - name: Test NetworkX
        run: |
          pytest -n auto --durations=10 --pyargs networkx

  default:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install packages
        run: |
          uv pip install -e .[default,test]
          uv pip list

      - name: Test for warnings at import time
        run: python -Werror -c "import networkx"

      - name: Test NetworkX
        run: |
          pytest -n auto --doctest-modules --durations=10 --pyargs networkx

  default-without-scipy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install packages
        run: |
          uv pip install -e .[default,test]
          uv pip uninstall scipy  # All default dependencies except scipy
          uv pip list

      - name: Test for warnings at import time
        run: python -Werror -c "import networkx"

      - name: Test NetworkX
        run: |
          pytest -n auto --doctest-modules --durations=10 --pyargs networkx

  dispatch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install packages
        run: |
          uv pip install -e .[default,test]
          uv pip list

      - name: Test Dispatching
        run: |
          NETWORKX_TEST_BACKEND=nx_loopback pytest -n auto --doctest-modules --durations=10 --pyargs networkx

  extra:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Before install (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install graphviz graphviz-dev

      - name: Before install (macOS)
        if: runner.os == 'macOS'
        run: brew install graphviz

      - name: Before install (Windows)
        if: runner.os == 'Windows'
        run: choco install graphviz

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          uv pip install -e .[default,test,extra]
          uv pip list
      - name: Install packages (macOS)
        if: runner.os == 'macOS'
        run: |
          uv pip install --no-cache \
                      --config-settings="--global-option=build_ext" \
                      --config-settings="--global-option=-I$(brew --prefix graphviz)/include/" \
                      --config-settings="--global-option=-L$(brew --prefix graphviz)/lib/" \
                      pygraphviz
          uv pip install -e .[default,test,extra]
          uv pip list
      - name: Install Pygraphviz packages  (windows)
        if: runner.os == 'Windows'
        run: |
          echo "C:\Program Files\Graphviz\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          uv pip install --config-settings="--global-option=build_ext" `
              --config-settings="--global-option=-IC:\Program Files\Graphviz\include" `
              --config-settings="--global-option=-LC:\Program Files\Graphviz\lib" `
              pygraphviz
      - name: Install packages (windows)
        if: runner.os == 'Windows'
        run: |
          echo "C:\Program Files\Graphviz\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          uv pip install -e .[default,test,extra]
          uv pip list

      - name: Test NetworkX
        run: |
          pytest -n auto --doctest-modules --durations=10 --pyargs networkx

  prerelease:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, macos]
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install packages
        run: |
          uv pip install --prerelease=allow -e .[default,test]
          uv pip list

      - name: Test NetworkX
        run: |
          pytest -n auto --doctest-modules --durations=10 --pyargs networkx
